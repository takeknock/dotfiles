#include <iostream>
#include <string>
#include <sstream>
#include <algorithm>
#include <numeric>
#include <iomanip>
#include <climits>
#include <vector>
#include <functional>
#include <cstring>
#include <list>
#include <fstream>
#include <map>
#include <cmath>
#include <cctype>

using namespace std;

typedef long long ll;

std::vector<std::vector<char> > field;
void TryMemo(int k, int i, int j, char c){
    if(k < MEMO_MAX_K){
        field[i][j] = c;
    }
}
bool IsRed(int k, int i, int j){
    if(k < MEMO_MAX_K){
        if(field[i][j] != 'W'){
            return field[i][j] == 'R';
        }
    }
    if(i%2==1 && j%2==1){
        TryMemo(k, i, j, 'B');
        return false;
    }
    if(k==0){
        TryMemo(k, i, j, 'R');
        return true;
    }
    if(k==1){
        bool is_red = !((i==1) && (j==1));
        TryMemo(k, i, j, (is_red ? 'R' : 'B'));
        return is_red;
    }
    ll pow2k_1 = static_cast<ll>(pow(2.0,static_cast<double>(k-1)));
    if((i>=pow2k_1)&&(j>=pow2k_1)){
        TryMemo(k, i, j, 'B');
        return false;
    }
    bool is_red = IsRed(k-1, i%pow2k_1, j%pow2k_1);
    TryMemo(k, i, j, is_red ? 'R' : 'B');
    return is_red;
}

int main(){
    int test_case_num;
    std::cin >> test_case_num;
    for(int case_number=0 ; case_number < test_case_num; ++case_number){
        ll k, a, b;
        std::cin >> k >> a >> b;
        ll pow2k = static_cast<ll>(pow(2.0,static_cast<double>(k)));
        a-=1;
        b-=1;
        //std::cout << pow2k << std::endl;
        ll answer = 0;
        for(int i=a; i <= b; ++i){
            for(int j=0; j < pow2k; ++j){
                //std::cout << i << " " << j << std::flush;
                if(IsRed(k,i,j)){
                    ++answer;
                    //std::cout << "R";
                }
                else {
                    //std::cout << "B";
                }

            }
            //std::cout << std::endl;
        }
        std::cout << "Case " << case_number << ": " << answer << "\n" << std::endl;
    }
	return 0;
}

